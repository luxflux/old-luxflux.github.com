<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Passionate coding]]></title>
  <link href="http://blog.yux.ch/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blog.yux.ch/"/>
  <updated>2013-10-02T01:17:19+02:00</updated>
  <id>http://blog.yux.ch/</id>
  <author>
    <name><![CDATA[Raffael Schmid]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vim inline git diff]]></title>
    <link href="http://blog.yux.ch/blog/2013/02/20/vim-inline-git-diff/"/>
    <updated>2013-02-20T22:23:00+01:00</updated>
    <id>http://blog.yux.ch/blog/2013/02/20/vim-inline-git-diff</id>
    <content type="html"><![CDATA[<p>A few weeks ago, I heard about the Sublime Text Plugin <a href="https://github.com/jisaacks/GitGutter">GitGutter</a>.
When I googled for an equivalent plugin for Vim, I did not find anything usable.
There is <a href="http://www.vim.org/scripts/script.php?script_id=1881">Svndiff</a>, but I
did not like the name and that you had to enable it by hand. So I put the topic
aside and went on with other stuff.</p>

<p>Last week, I started over with my Vim configuration. I was using the
<a href="https://github.com/skwp/dotfiles">dotfiles of skwp</a> which included also a
pretty nice Vim configuration. But after working with it for some months, I
started to feel uncomfortable with it as it had just too much features.</p>

<p>As part of building up my Vim configuration, I also checked again the topic
of inline git annotations.
I googled once more and found out, that these annotations are called <code>signs</code>
in Vim. I also found the plugin of <a href="https://github.com/sickill/vim-git-inline-diff">sickill</a>.
This plugin uses ruby (I did not even know, that is possible..!) to do the core work of
parsing the diff and set the correct marks. Unfortunately it did not work for me...
But hey, this is ruby. Let's fix this!</p>

<p>After some hours of learning how to read <code>diff -u</code> output and tuning the algorithm to
mark the correct lines, I had a working version of <code>vim-git-inline-diff</code>.</p>

<p>I made a <a href="https://github.com/luxflux/vim-git-inline-diff">fork</a> of the existing plugin
and added a <code>Readme</code>. There is also a possibility to configure the used symbols, now:</p>

<p><img src="https://github.com/luxflux/vim-git-inline-diff/raw/master/_assets/example.png" alt="Screenshot" /></p>

<p>Happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript tests with PhantomJS]]></title>
    <link href="http://blog.yux.ch/blog/2013/01/19/javascript-tests-with-phantomjs/"/>
    <updated>2013-01-19T17:57:00+01:00</updated>
    <id>http://blog.yux.ch/blog/2013/01/19/javascript-tests-with-phantomjs</id>
    <content type="html"><![CDATA[<p>Today I wanted to write some javascript tests for my <a href="https://github.com/luxflux/Moviez">Moviezz</a> project.</p>

<p>Maybe two years ago, I've written javascript tests for a project at <a href="http://nine.ch">nine.ch</a>.
I ended up by using Cucumber, Capybara and Selenium for this. The result was okay, but it took you a very long time to run the tests
and you could not do anything else than watching your webbrowser clicking links and filling in text.</p>

<p>Some weeks ago, I heard about PhantomJS and I waited since for the right chance to try it out.
PhantomJS enables you to run your javascript tests headless, means no browser windows is opened and used to click and fill.
This also gives you the ability to run your javascript tests via Jenkins or Travis.</p>

<!-- more -->


<p>At first, I verified that <code>capybara</code> is in my <code>Gemfile</code>.</p>

<p><code>ruby Gemfile
gem 'capybara', group: :test
</code></p>

<p>It also has to be loaded by <code>RSpec</code>, so I required it in <code>spec_helper</code>.
<code>ruby spec/spec_helper.rb
require 'capybara/rspec'
require 'capybara/rails'
</code></p>

<p>After this, I went on and wrote the first javascript test with RSpec.
Note the <code>js: true</code> on line 7, this switches the Capybara driver to the javascript adapter.</p>

<p>```ruby spec/integration/search_movie_spec.rb
require 'spec_helper'</p>

<p>describe 'search for a movie' do</p>

<p>  let(:tmdb_movie) { tmdb_result }</p>

<p>  it 'searches for the given title', js: true do</p>

<pre><code>visit new_movie_path
page.should_not have_content('Star Wars Episode VII')
fill_in 'title', with: 'Star Wars'
page.should have_content('Star Wars Episode VII')
</code></pre>

<p>  end
end
```</p>

<p>When I ran the test, Capybara opened a new Firefox window and did my defined steps as expected.</p>

<p>To use PhantomJS with Capybara, you have to switch to another adapter.
There is an adapter called Poltergeist which enables you to use PhantomJS.
So I went on and added Poltergeist to my Gemfile.</p>

<p><code>ruby Gemfile
gem 'poltergeist', group: :test
</code></p>

<p>As soon as I required <code>capybara/poltergeist</code> and added <code>Capybara.javascript_driver = :poltergeist</code> in <code>spec_helper.rb</code>, my javascript test passed without opening a window.</p>

<p>You cannot use transactions, which is the default, to cleanup your database after each javascript test, better explained <a href="https://github.com/jnicklas/capybara#transactions-and-database-setup">here</a>.
To solve this, you can use <code>DatabaseCleaner</code> with the truncation strategy instead of transactions.</p>

<p>But there is a caveat, the truncation strategy is slower.
As I like my tests run fast, I wrote the following RSpec configuration which just enables the truncation strategy
for tests with <code>js: true</code> set.</p>

<p>```ruby spec/support/javascript.rb
RSpec.configure do |config|</p>

<p>  config.before :suite do</p>

<pre><code>DatabaseCleaner.strategy = :transaction
DatabaseCleaner.clean_with :truncation
Capybara.javascript_driver = :poltergeist
</code></pre>

<p>  end</p>

<p>  config.before :each do</p>

<pre><code>if example.metadata[:js]
  DatabaseCleaner.strategy = :truncation
else
  DatabaseCleaner.strategy = :transaction
  DatabaseCleaner.start
end
</code></pre>

<p>  end</p>

<p>  config.after :each do</p>

<pre><code>DatabaseCleaner.clean
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>Note, that I also moved <code>Capybara.javascript_driver = :poltergeist</code> into this config file as it belongs to the javascript configuration.</p>

<p>After this, I just had to disable the default transactional feature in <code>spec_helper.rb</code>
<code>ruby spec_helper.rb
RSpec.configure do |config|
  config.use_transactional_fixtures = false
end
</code></p>

<p>Now, I have headless javascript tests and the fastest possible database cleanup strategy depending on the test type.</p>

<p>All the code above can also be found <a href="https://gist.github.com/4573914">in a gist</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby1.9: Escape non-ASCII chars]]></title>
    <link href="http://blog.yux.ch/blog/2012/12/27/ruby1-dot-9-escape-non-ascii-chars/"/>
    <updated>2012-12-27T20:47:00+01:00</updated>
    <id>http://blog.yux.ch/blog/2012/12/27/ruby1-dot-9-escape-non-ascii-chars</id>
    <content type="html"><![CDATA[<p>What I learned recently about Unicode and Ruby. There is a <a href="/blog/2012/12/27/ruby1-dot-9-escape-non-ascii-chars/#tldr">TL;DR</a>.</p>

<!-- more -->


<p>At nine.ch, we have a webinterface to administrate our mailboxes. It also can be used to
configure (Sieve-)filters for incoming mails. These filters are persisted in a database and
uploaded to the storage via the Managesieve protocol.</p>

<p>As we wanted to migrate to a new version of storage software, the uploading of these filters started to fail for some mailboxes.
The error was something like <code>SieveError PUTSCRIPT: Too many arguments</code>.</p>

<p>Yeah, what does this mean...? <a href="http://tools.ietf.org/html/draft-martin-managesieve-12#section-2.6">The RFC says</a>
that the syntax for <code>PUTSCRIPT</code> is like the following:</p>

<p>```
Putscript "mysievescript" {110+}
require ["fileinto"];</p>

<p>if envelope :contains "to" "tmartin+sent" {
  fileinto "INBOX.sent";
}
```</p>

<p>A failing upload looked like this:
```
Putscript "mysievescript" {823+}
require ["fileinto","vacation","body","date","relational"];</p>

<p>if allof(not header :contains ["X-Spam-Flag"] "YES") {
  vacation :days 3 :from "'Name FamilyName' <a href="&#109;&#x61;&#105;&#108;&#116;&#x6f;&#58;&#110;&#97;&#109;&#101;&#x40;&#x64;&#111;&#x6d;&#97;&#x69;&#x6e;&#46;&#116;&#x6c;&#x64;">&#x6e;&#x61;&#x6d;&#101;&#x40;&#100;&#111;&#109;&#x61;&#x69;&#x6e;&#x2e;&#x74;&#108;&#100;</a>" :subject "Abwesenheitsmeldung" "sehr geehrte damen und herren
unser büro ist wegen ferienabwesenheit geschlossen. in dringenden fällen erreichen sie uns unter ....
}</p>

<h1>Rule Nr. 28804, sort_position 1</h1>

<p>if header :contains ["X-Spam-Flag"] "YES" {
  fileinto "INBOX.Spam";
  stop;
}
.
.
.
```</p>

<p>So this should work, no? Nope, doesn't. Hmm, there are umlauts in this vacation message... Trial and error shows, that removing them helps and
the script is accepted by the server.</p>

<p>Cool, looks like the server does something strange with the string containing the script and thinks you give him more arguments than allowed.</p>

<p>Now, how shall I fix this? During my research I stumbled over the extension list for <a href="http://wiki2.dovecot.org/Pigeonhole/Sieve">Pigeonhole Sieve</a>.
There is an extension called <code>encoded-character</code>, maybe this helps? Let's try.</p>

<p>We "just" have to escape these special chars according <a href="http://tools.ietf.org/html/rfc5228#section-2.4.2.4">the RFC</a>.</p>

<p>A first try with the following code gave me the broken characters (Ã¼, Ã¤, ...) in the vacation answer, known from UTF-8/ISO problems.</p>

<p>```ruby
def text
  clean_text = ''
  @text.join("\n").each_byte do |byte|</p>

<pre><code>unless byte &gt; 127
  clean_text &lt;&lt; byte
else
  clean_text &lt;&lt; "${UNICODE:#{byte.to_s(16)}}"
end
</code></pre>

<p>  end
  clean_text
end
```</p>

<p>Relevant part from the sieve script:
<code>text
unser b${UNICODE:c3}${UNICODE:bc}ro ist wegen ferienabwesenheit geschlossen.
in dringenden f${UNICODE:bc}${UNICODE:e4}llen erreichen sie uns unter ....
</code></p>

<p>I shortly googled an <a href="http://www.utf8-chartable.de/">utf-8 chartable</a> and checked the content of the script.
Looks like my simple <code>ü</code> and <code>ä</code> are two bytes in Unicode? And when we just translate one byte at a time, this gives us
these (hated) character-combinations as each byte is interpreted as a single Unicode character?
Heard about this, but never really thought about it before.</p>

<p>Okay, lets consult the Ruby String documentation and check whether there is a better method to get these characters:
<a href="http://www.ruby-doc.org/core-1.9.3/String.html#method-i-each_codepoint">String#each_codepoint</a>.</p>

<p>Now it works!</p>

<p>Final version of the method to use <code>each_codepoint</code>:</p>

<p>```ruby
def text
  clean_text = ''
  @text.join("\n").each_codepoint do |codepoint|</p>

<pre><code>unless codepoint &gt; 127
  clean_text &lt;&lt; codepoint
else
  clean_text &lt;&lt; "${UNICODE:#{codepoint.to_s(16)}}"
end
</code></pre>

<p>  end
  clean_text
end
```</p>

<p>Relevant part from sieve script:
<code>text
unser b${UNICODE:fc}ro ist wegen ferienabwesenheit geschlossen.
in dringenden f${UNICODE:e4}llen erreichen sie uns unter ....
</code></p>

<h1><a id='tldr'></a> TL;DR</h1>

<p>Use <code>String#each_codepoint</code> if you read a string and want to use the hex representation of its characters. Otherwhise you create
an encoding problem without changing the encoding.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hubot, Ubuntu and .deb packages]]></title>
    <link href="http://blog.yux.ch/blog/2012/11/25/hubot-ubuntu-and-deb-packages/"/>
    <updated>2012-11-25T15:58:00+01:00</updated>
    <id>http://blog.yux.ch/blog/2012/11/25/hubot-ubuntu-and-deb-packages</id>
    <content type="html"><![CDATA[<p>This week I finally got the time to check out <a href="http://hubot.github.com/">Hubot</a>.
Which really is a cool bot for your IRC/Campfire-Channel.</p>

<p>As I dislike solutions like "just extract this tarball and run ..." for
production deployment, I needed a way to deploy and configure this with
puppet. The solution should also be very easy, so we can create a
jenkins task to build the package.</p>

<p>I came out with a solution where you just need to run two commands to
create a new package from upstream:
<code>bash
rake prepare[2.3.2]
rake build
</code></p>

<!-- more -->


<p>My solution was to use <a href="https://github.com/jordansissel/fpm">fpm</a> to
create a debian package from a folder which contained all the stuff to
run Hubot.</p>

<p>As there is a huge repository of <a href="https://github.com/github/hubot-scripts">Hubot-scripts</a>
and I also wanted some plugins out of it, I also needed a configuration
file to define which scripts I wanted to have packaged into.</p>

<p>To automate the process of downloading <code>Hubot</code> and the needed scripts,
afterwards installing the <code>npm</code>-modules and packing it with fpm,
I decided to use <code>rake</code>.</p>

<p>There is a configfile, <code>config.yml</code>.</p>

<p><code>ruby Configfile (config.yml)
package_url: 'https://github.com/downloads/github/hubot'
scripts_url: 'https://raw.github.com/github/hubot-scripts/master/src/scripts'
scripts:
 - jenkins
 - moarcatsme
 - redmine
</code></p>

<p>The <code>Rakefile</code> contains all the rake-tasks which are used to build
the package.</p>

<p>```ruby Rakefile
require 'yaml'</p>

<p>desc "Prepare the package"
task :prepare, [:version] do |task,args|
  config = YAML.load_file('config.yml')</p>

<p>  sh "echo #{args.version} > VERSION"</p>

<p>  Dir.mkdir 'workdir'
  Dir.mkdir 'packages'</p>

<p>  Dir.chdir 'workdir'</p>

<p>  sh "curl -L #{config['package_url']}/hubot-#{args.version}.tar.gz | tar xzf -"</p>

<p>  config['scripts'].each do |script|</p>

<pre><code>sh "curl -L #{config['scripts_url']}/#{script}.coffee &gt; scripts/#{script}.coffee"
</code></pre>

<p>  end</p>

<p>  sh 'npm install coffee-script'
  sh 'npm install hubot-irc --save'
  sh 'npm install'
end</p>

<p>desc 'Build the package'
task :build do
  Dir.chdir 'workdir'
  sh 'fpm -s dir -t deb -n hubot --prefix /opt -v $(cat ../VERSION) -d nodejs --after-install ../postinst --before-install ../preinst hubot'
  Dir.chdir '..'
  sh 'cp workdir/hubot<em>$(cat VERSION)</em>amd64.deb packages/'</p>

<p>  sh 'fpm -s dir -t deb -n hubot-init --prefix / -v $(cat VERSION) -d hubot,upstart --package packages/hubot-init-$(cat VERSION)_amd64.deb etc'
end
```</p>

<p>The <code>prepare</code>-task takes one argument which should be the version (e.g <code>2.3.2</code>).
It downloads the tarball of this version and extracts it in a subfolder.
Then it downloads all the specified scripts and puts them into the
correct folder of Hubot.
Afterwards it installs the <code>npm</code>-modules to another subfolder of
hubot.</p>

<p>The most interesting part are the <code>fpm</code>-lines:
<code>ruby fpm command to create the package
sh 'fpm -s dir -t deb -n hubot --prefix /opt -v $(cat ../VERSION) -d nodejs --after-install ../postinst --before-install ../preinst hubot'
</code></p>

<p>This command creates a debian package (<code>-t deb</code>) from a directory
(<code>-s dir</code>) and throws all the stuff of the given directory
(last argument, <code>hubot</code>) in <code>/opt</code> (<code>--prefix /opt</code>).
It uses the version we gave the <code>prepare</code>-task
and adds a <code>preinst</code> and a <code>postinst</code> file.
With <code>-d nodejs</code> we set a dependency on <code>nodejs</code>.
We need to change the current workingdir, otherwhise fpm would deploy
the stuff in <code>/opt/workdir/hubot</code>.</p>

<p>The second fpm command packages the init script and the example config
file from the <code>etc</code>-folder.
<code>ruby fpm command to package the init script and example config
sh 'fpm -s dir -t deb -n hubot-init --prefix / -v $(cat VERSION) -d hubot,upstart --package packages/hubot-init-$(cat VERSION)_amd64.deb etc'
</code></p>

<p>The <code>preinst</code> and <code>postinst</code> scripts just add a <code>hubot</code>
user and set the rights on <code>/opt/hubot</code> as fpm
<a href="https://github.com/jordansissel/fpm/issues/178">does not support right management for debian packages</a>,
yet.</p>

<p>I tried several times to get all these stuff working. For an easier cleanup
between the tries, I added another task:
```ruby cleanup task
require 'fileutils'</p>

<p>desc "Cleanup the workdir"
task :cleanup do
  FileUtils.rm_r 'workdir' if File.exists? 'workdir'
  FileUtils.rm_r 'packages' if File.exists? 'packages'
end
```</p>

<p>Now we just need to modify the <code>config.yml</code>, push the changes and
call Hubot in our IRC-Channel to trigger the jenkins build:
<code>
hubot jenkins build hubot-build-deb, version=2.3.2
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gem: Version Reader]]></title>
    <link href="http://blog.yux.ch/blog/2012/11/25/gem-version-reader/"/>
    <updated>2012-11-25T15:16:00+01:00</updated>
    <id>http://blog.yux.ch/blog/2012/11/25/gem-version-reader</id>
    <content type="html"><![CDATA[<p>If you are using a <code>VERSION</code>-file to give your new (or old) cool
software tool a version, you maybe also want to display it in the footer
of the website or in the <code>help</code> command option of your CLI.</p>

<p>Instead of writing stuff like this
<code>ruby
def version
  @version ||= File.open('VERSION', 'rb') { |f| f.read }.strip
end
</code></p>

<p>you could use <a href="https://github.com/luxflux/version_reader">version_reader</a>
(written by me) which reads the <code>VERSION</code>-file and does all the
stripping and formatting for you.</p>

<!-- more -->


<p>Version Reader is just a small wrapper around the <code>VERSION</code>-file.</p>

<p>Let's do a short example. Imagine that your <code>VERSION</code>-file is in <code>~/MyApp/</code>
with the content <code>0.4.2\n</code>. Load the version with the following code:</p>

<p>```ruby
require 'version_reader'</p>

<p>version_reader = VersionReader.new('~/MyApp/VERSION')
```</p>

<p>Now, you can display a nicely formatted version
<code>ruby
version_reader.normal # Output: 0.4.2
</code></p>

<p>If you don't like this output, just write a flavor to add a
different one. There is already a Rails-flavor which adds some
additional output formats:</p>

<p><code>ruby
version_reader.extend VersionReader::Flavor::Rails
version_reader.rails_env # Output: 0.4.2-development
</code></p>

<p>Check the <a href="https://github.com/luxflux/version_reader">Readme</a> for more
details.</p>

<p>By the way, if you add this Gem in the <code>Gemfile</code> of your Rails-Application,
it will automatically define <code>MyApp::Application.version</code> with a
Rails-flavored instance of <code>VersionReader</code>.</p>
]]></content>
  </entry>
  
</feed>
