<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Passionate coding]]></title>
  <link href="http://blog.yux.ch/atom.xml" rel="self"/>
  <link href="http://blog.yux.ch/"/>
  <updated>2013-05-14T19:29:24+02:00</updated>
  <id>http://blog.yux.ch/</id>
  <author>
    <name><![CDATA[Raffael Schmid]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vim inline git diff]]></title>
    <link href="http://blog.yux.ch/blog/2013/02/20/vim-inline-git-diff/"/>
    <updated>2013-02-20T22:23:00+01:00</updated>
    <id>http://blog.yux.ch/blog/2013/02/20/vim-inline-git-diff</id>
    <content type="html"><![CDATA[<p>A few weeks ago, I heard about the Sublime Text Plugin <a href="https://github.com/jisaacks/GitGutter">GitGutter</a>.
When I googled for an equivalent plugin for Vim, I did not find anything usable.
There is <a href="http://www.vim.org/scripts/script.php?script_id=1881">Svndiff</a>, but I
did not like the name and that you had to enable it by hand. So I put the topic
aside and went on with other stuff.</p>

<p>Last week, I started over with my Vim configuration. I was using the
<a href="https://github.com/skwp/dotfiles">dotfiles of skwp</a> which included also a
pretty nice Vim configuration. But after working with it for some months, I
started to feel uncomfortable with it as it had just too much features.</p>

<p>As part of building up my Vim configuration, I also checked again the topic
of inline git annotations.
I googled once more and found out, that these annotations are called <code>signs</code>
in Vim. I also found the plugin of <a href="https://github.com/sickill/vim-git-inline-diff">sickill</a>.
This plugin uses ruby (I did not even know, that is possible..!) to do the core work of
parsing the diff and set the correct marks. Unfortunately it did not work for me&#8230;
But hey, this is ruby. Let&#8217;s fix this!</p>

<p>After some hours of learning how to read <code>diff -u</code> output and tuning the algorithm to
mark the correct lines, I had a working version of <code>vim-git-inline-diff</code>.</p>

<p>I made a <a href="https://github.com/luxflux/vim-git-inline-diff">fork</a> of the existing plugin
and added a <code>Readme</code>. There is also a possibility to configure the used symbols, now:</p>

<p><img src="https://github.com/luxflux/vim-git-inline-diff/raw/master/_assets/example.png" alt="Screenshot" /></p>

<p>Happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript tests with PhantomJS]]></title>
    <link href="http://blog.yux.ch/blog/2013/01/19/javascript-tests-with-phantomjs/"/>
    <updated>2013-01-19T17:57:00+01:00</updated>
    <id>http://blog.yux.ch/blog/2013/01/19/javascript-tests-with-phantomjs</id>
    <content type="html"><![CDATA[<p>Today I wanted to write some javascript tests for my <a href="https://github.com/luxflux/Moviez">Moviezz</a> project.</p>

<p>Maybe two years ago, I&#8217;ve written javascript tests for a project at <a href="http://nine.ch">nine.ch</a>.
I ended up by using Cucumber, Capybara and Selenium for this. The result was okay, but it took you a very long time to run the tests
and you could not do anything else than watching your webbrowser clicking links and filling in text.</p>

<p>Some weeks ago, I heard about PhantomJS and I waited since for the right chance to try it out.
PhantomJS enables you to run your javascript tests headless, means no browser windows is opened and used to click and fill.
This also gives you the ability to run your javascript tests via Jenkins or Travis.</p>

<!-- more -->


<p>At first, I verified that <code>capybara</code> is in my <code>Gemfile</code>.</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;capybara&#39;</span><span class="p">,</span> <span class="n">group</span><span class="p">:</span> <span class="ss">:test</span>
</span></code></pre></td></tr></table></div></figure>


<p>It also has to be loaded by <code>RSpec</code>, so I required it in <code>spec_helper</code>.</p>

<figure class='code'><figcaption><span>spec/spec_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;capybara/rspec&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capybara/rails&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After this, I went on and wrote the first javascript test with RSpec.
Note the <code>js: true</code> on line 7, this switches the Capybara driver to the javascript adapter.</p>

<figure class='code'><figcaption><span>spec/integration/search_movie_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="s1">&#39;search for a movie&#39;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:tmdb_movie</span><span class="p">)</span> <span class="p">{</span> <span class="n">tmdb_result</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;searches for the given title&#39;</span><span class="p">,</span> <span class="n">js</span><span class="p">:</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">visit</span> <span class="n">new_movie_path</span>
</span><span class='line'>    <span class="n">page</span><span class="o">.</span><span class="n">should_not</span> <span class="n">have_content</span><span class="p">(</span><span class="s1">&#39;Star Wars Episode VII&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">fill_in</span> <span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="n">with</span><span class="p">:</span> <span class="s1">&#39;Star Wars&#39;</span>
</span><span class='line'>    <span class="n">page</span><span class="o">.</span><span class="n">should</span> <span class="n">have_content</span><span class="p">(</span><span class="s1">&#39;Star Wars Episode VII&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When I ran the test, Capybara opened a new Firefox window and did my defined steps as expected.</p>

<p>To use PhantomJS with Capybara, you have to switch to another adapter.
There is an adapter called Poltergeist which enables you to use PhantomJS.
So I went on and added Poltergeist to my Gemfile.</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;poltergeist&#39;</span><span class="p">,</span> <span class="n">group</span><span class="p">:</span> <span class="ss">:test</span>
</span></code></pre></td></tr></table></div></figure>


<p>As soon as I required <code>capybara/poltergeist</code> and added <code>Capybara.javascript_driver = :poltergeist</code> in <code>spec_helper.rb</code>, my javascript test passed without opening a window.</p>

<p>You cannot use transactions, which is the default, to cleanup your database after each javascript test, better explained <a href="https://github.com/jnicklas/capybara#transactions-and-database-setup">here</a>.
To solve this, you can use <code>DatabaseCleaner</code> with the truncation strategy instead of transactions.</p>

<p>But there is a caveat, the truncation strategy is slower.
As I like my tests run fast, I wrote the following RSpec configuration which just enables the truncation strategy
for tests with <code>js: true</code> set.</p>

<figure class='code'><figcaption><span>spec/support/javascript.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">before</span> <span class="ss">:suite</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">strategy</span> <span class="o">=</span> <span class="ss">:transaction</span>
</span><span class='line'>    <span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">clean_with</span> <span class="ss">:truncation</span>
</span><span class='line'>    <span class="no">Capybara</span><span class="o">.</span><span class="n">javascript_driver</span> <span class="o">=</span> <span class="ss">:poltergeist</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">before</span> <span class="ss">:each</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">example</span><span class="o">.</span><span class="n">metadata</span><span class="o">[</span><span class="ss">:js</span><span class="o">]</span>
</span><span class='line'>      <span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">strategy</span> <span class="o">=</span> <span class="ss">:truncation</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">strategy</span> <span class="o">=</span> <span class="ss">:transaction</span>
</span><span class='line'>      <span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">after</span> <span class="ss">:each</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">clean</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note, that I also moved <code>Capybara.javascript_driver = :poltergeist</code> into this config file as it belongs to the javascript configuration.</p>

<p>After this, I just had to disable the default transactional feature in <code>spec_helper.rb</code></p>

<figure class='code'><figcaption><span>spec_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">use_transactional_fixtures</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, I have headless javascript tests and the fastest possible database cleanup strategy depending on the test type.</p>

<p>All the code above can also be found <a href="https://gist.github.com/4573914">in a gist</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby1.9: Escape non-ASCII chars]]></title>
    <link href="http://blog.yux.ch/blog/2012/12/27/ruby1-dot-9-escape-non-ascii-chars/"/>
    <updated>2012-12-27T20:47:00+01:00</updated>
    <id>http://blog.yux.ch/blog/2012/12/27/ruby1-dot-9-escape-non-ascii-chars</id>
    <content type="html"><![CDATA[<p>What I learned recently about Unicode and Ruby. There is a <a href="http://blog.yux.ch/blog/2012/12/27/ruby1-dot-9-escape-non-ascii-chars/#tldr">TL;DR</a>.</p>

<!-- more -->


<p>At nine.ch, we have a webinterface to administrate our mailboxes. It also can be used to
configure (Sieve-)filters for incoming mails. These filters are persisted in a database and
uploaded to the storage via the Managesieve protocol.</p>

<p>As we wanted to migrate to a new version of storage software, the uploading of these filters started to fail for some mailboxes.
The error was something like <code>SieveError PUTSCRIPT: Too many arguments</code>.</p>

<p>Yeah, what does this mean&#8230;? <a href="http://tools.ietf.org/html/draft-martin-managesieve-12#section-2.6">The RFC says</a>
that the syntax for <code>PUTSCRIPT</code> is like the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Putscript "mysievescript" {110+}
</span><span class='line'>require ["fileinto"];
</span><span class='line'>
</span><span class='line'>if envelope :contains "to" "tmartin+sent" {
</span><span class='line'>  fileinto "INBOX.sent";
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>A failing upload looked like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Putscript "mysievescript" {823+}
</span><span class='line'>require ["fileinto","vacation","body","date","relational"];
</span><span class='line'>
</span><span class='line'>if allof(not header :contains ["X-Spam-Flag"] "YES") {
</span><span class='line'>  vacation :days 3 :from "'Name FamilyName' &lt;name@domain.tld&gt;" :subject "Abwesenheitsmeldung" "sehr geehrte damen und herren
</span><span class='line'>unser büro ist wegen ferienabwesenheit geschlossen. in dringenden fällen erreichen sie uns unter ....
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'># Rule Nr. 28804, sort_position 1
</span><span class='line'>if header :contains ["X-Spam-Flag"] "YES" {
</span><span class='line'>  fileinto "INBOX.Spam";
</span><span class='line'>  stop;
</span><span class='line'>}
</span><span class='line'>.
</span><span class='line'>.
</span><span class='line'>.</span></code></pre></td></tr></table></div></figure>


<p>So this should work, no? Nope, doesn&#8217;t. Hmm, there are umlauts in this vacation message&#8230; Trial and error shows, that removing them helps and
the script is accepted by the server.</p>

<p>Cool, looks like the server does something strange with the string containing the script and thinks you give him more arguments than allowed.</p>

<p>Now, how shall I fix this? During my research I stumbled over the extension list for <a href="http://wiki2.dovecot.org/Pigeonhole/Sieve">Pigeonhole Sieve</a>.
There is an extension called <code>encoded-character</code>, maybe this helps? Let&#8217;s try.</p>

<p>We &#8220;just&#8221; have to escape these special chars according <a href="http://tools.ietf.org/html/rfc5228#section-2.4.2.4">the RFC</a>.</p>

<p>A first try with the following code gave me the broken characters (Ã¼, Ã¤, &#8230;) in the vacation answer, known from UTF-8/ISO problems.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">text</span>
</span><span class='line'>  <span class="n">clean_text</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="vi">@text</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">each_byte</span> <span class="k">do</span> <span class="o">|</span><span class="n">byte</span><span class="o">|</span>
</span><span class='line'>    <span class="k">unless</span> <span class="n">byte</span> <span class="o">&gt;</span> <span class="mi">127</span>
</span><span class='line'>      <span class="n">clean_text</span> <span class="o">&lt;&lt;</span> <span class="n">byte</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">clean_text</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;${UNICODE:</span><span class="si">#{</span><span class="n">byte</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span><span class="si">}</span><span class="s2">}&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">clean_text</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Relevant part from the sieve script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>unser b${UNICODE:c3}${UNICODE:bc}ro ist wegen ferienabwesenheit geschlossen.
</span><span class='line'>in dringenden f${UNICODE:bc}${UNICODE:e4}llen erreichen sie uns unter ....
</span></code></pre></td></tr></table></div></figure>


<p>I shortly googled an <a href="http://www.utf8-chartable.de/">utf-8 chartable</a> and checked the content of the script.
Looks like my simple <code>ü</code> and <code>ä</code> are two bytes in Unicode? And when we just translate one byte at a time, this gives us
these (hated) character-combinations as each byte is interpreted as a single Unicode character?
Heard about this, but never really thought about it before.</p>

<p>Okay, lets consult the Ruby String documentation and check whether there is a better method to get these characters:
<a href="http://www.ruby-doc.org/core-1.9.3/String.html#method-i-each_codepoint">String#each_codepoint</a>.</p>

<p>Now it works!</p>

<p>Final version of the method to use <code>each_codepoint</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">text</span>
</span><span class='line'>  <span class="n">clean_text</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="vi">@text</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">each_codepoint</span> <span class="k">do</span> <span class="o">|</span><span class="n">codepoint</span><span class="o">|</span>
</span><span class='line'>    <span class="k">unless</span> <span class="n">codepoint</span> <span class="o">&gt;</span> <span class="mi">127</span>
</span><span class='line'>      <span class="n">clean_text</span> <span class="o">&lt;&lt;</span> <span class="n">codepoint</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">clean_text</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;${UNICODE:</span><span class="si">#{</span><span class="n">codepoint</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span><span class="si">}</span><span class="s2">}&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">clean_text</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Relevant part from sieve script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>unser b${UNICODE:fc}ro ist wegen ferienabwesenheit geschlossen.
</span><span class='line'>in dringenden f${UNICODE:e4}llen erreichen sie uns unter ....
</span></code></pre></td></tr></table></div></figure>


<h1><a id='tldr'></a> TL;DR</h1>

<p>Use <code>String#each_codepoint</code> if you read a string and want to use the hex representation of its characters. Otherwhise you create
an encoding problem without changing the encoding.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hubot, Ubuntu and .deb packages]]></title>
    <link href="http://blog.yux.ch/blog/2012/11/25/hubot-ubuntu-and-deb-packages/"/>
    <updated>2012-11-25T15:58:00+01:00</updated>
    <id>http://blog.yux.ch/blog/2012/11/25/hubot-ubuntu-and-deb-packages</id>
    <content type="html"><![CDATA[<p>This week I finally got the time to check out <a href="http://hubot.github.com/">Hubot</a>.
Which really is a cool bot for your IRC/Campfire-Channel.</p>

<p>As I dislike solutions like &#8220;just extract this tarball and run &#8230;&#8221; for
production deployment, I needed a way to deploy and configure this with
puppet. The solution should also be very easy, so we can create a
jenkins task to build the package.</p>

<p>I came out with a solution where you just need to run two commands to
create a new package from upstream:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake prepare<span class="o">[</span>2.3.2<span class="o">]</span>
</span><span class='line'>rake build
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>My solution was to use <a href="https://github.com/jordansissel/fpm">fpm</a> to
create a debian package from a folder which contained all the stuff to
run Hubot.</p>

<p>As there is a huge repository of <a href="https://github.com/github/hubot-scripts">Hubot-scripts</a>
and I also wanted some plugins out of it, I also needed a configuration
file to define which scripts I wanted to have packaged into.</p>

<p>To automate the process of downloading <code>Hubot</code> and the needed scripts,
afterwards installing the <code>npm</code>-modules and packing it with fpm,
I decided to use <code>rake</code>.</p>

<p>There is a configfile, <code>config.yml</code>.</p>

<figure class='code'><figcaption><span>Configfile (config.yml)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">package_url</span><span class="p">:</span> <span class="s1">&#39;https://github.com/downloads/github/hubot&#39;</span>
</span><span class='line'><span class="n">scripts_url</span><span class="p">:</span> <span class="s1">&#39;https://raw.github.com/github/hubot-scripts/master/src/scripts&#39;</span>
</span><span class='line'><span class="n">scripts</span><span class="p">:</span>
</span><span class='line'> <span class="o">-</span> <span class="n">jenkins</span>
</span><span class='line'> <span class="o">-</span> <span class="n">moarcatsme</span>
</span><span class='line'> <span class="o">-</span> <span class="n">redmine</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>Rakefile</code> contains all the rake-tasks which are used to build
the package.</p>

<figure class='code'><figcaption><span>Rakefile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;yaml&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s2">&quot;Prepare the package&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:prepare</span><span class="p">,</span> <span class="o">[</span><span class="ss">:version</span><span class="o">]</span> <span class="k">do</span> <span class="o">|</span><span class="n">task</span><span class="p">,</span><span class="n">args</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span> <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load_file</span><span class="p">(</span><span class="s1">&#39;config.yml&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">sh</span> <span class="s2">&quot;echo </span><span class="si">#{</span><span class="n">args</span><span class="o">.</span><span class="n">version</span><span class="si">}</span><span class="s2"> &gt; VERSION&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">Dir</span><span class="o">.</span><span class="n">mkdir</span> <span class="s1">&#39;workdir&#39;</span>
</span><span class='line'>  <span class="no">Dir</span><span class="o">.</span><span class="n">mkdir</span> <span class="s1">&#39;packages&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">Dir</span><span class="o">.</span><span class="n">chdir</span> <span class="s1">&#39;workdir&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">sh</span> <span class="s2">&quot;curl -L </span><span class="si">#{</span><span class="n">config</span><span class="o">[</span><span class="s1">&#39;package_url&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">/hubot-</span><span class="si">#{</span><span class="n">args</span><span class="o">.</span><span class="n">version</span><span class="si">}</span><span class="s2">.tar.gz | tar xzf -&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">[</span><span class="s1">&#39;scripts&#39;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">script</span><span class="o">|</span>
</span><span class='line'>    <span class="n">sh</span> <span class="s2">&quot;curl -L </span><span class="si">#{</span><span class="n">config</span><span class="o">[</span><span class="s1">&#39;scripts_url&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">script</span><span class="si">}</span><span class="s2">.coffee &gt; scripts/</span><span class="si">#{</span><span class="n">script</span><span class="si">}</span><span class="s2">.coffee&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">sh</span> <span class="s1">&#39;npm install coffee-script&#39;</span>
</span><span class='line'>  <span class="n">sh</span> <span class="s1">&#39;npm install hubot-irc --save&#39;</span>
</span><span class='line'>  <span class="n">sh</span> <span class="s1">&#39;npm install&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s1">&#39;Build the package&#39;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:build</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">Dir</span><span class="o">.</span><span class="n">chdir</span> <span class="s1">&#39;workdir&#39;</span>
</span><span class='line'>  <span class="n">sh</span> <span class="s1">&#39;fpm -s dir -t deb -n hubot --prefix /opt -v $(cat ../VERSION) -d nodejs --after-install ../postinst --before-install ../preinst hubot&#39;</span>
</span><span class='line'>  <span class="no">Dir</span><span class="o">.</span><span class="n">chdir</span> <span class="s1">&#39;..&#39;</span>
</span><span class='line'>  <span class="n">sh</span> <span class="s1">&#39;cp workdir/hubot_$(cat VERSION)_amd64.deb packages/&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">sh</span> <span class="s1">&#39;fpm -s dir -t deb -n hubot-init --prefix / -v $(cat VERSION) -d hubot,upstart --package packages/hubot-init-$(cat VERSION)_amd64.deb etc&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>prepare</code>-task takes one argument which should be the version (e.g <code>2.3.2</code>).
It downloads the tarball of this version and extracts it in a subfolder.
Then it downloads all the specified scripts and puts them into the
correct folder of Hubot.
Afterwards it installs the <code>npm</code>-modules to another subfolder of
hubot.</p>

<p>The most interesting part are the <code>fpm</code>-lines:</p>

<figure class='code'><figcaption><span>fpm command to create the package</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sh</span> <span class="s1">&#39;fpm -s dir -t deb -n hubot --prefix /opt -v $(cat ../VERSION) -d nodejs --after-install ../postinst --before-install ../preinst hubot&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This command creates a debian package (<code>-t deb</code>) from a directory
(<code>-s dir</code>) and throws all the stuff of the given directory
(last argument, <code>hubot</code>) in <code>/opt</code> (<code>--prefix /opt</code>).
It uses the version we gave the <code>prepare</code>-task
and adds a <code>preinst</code> and a <code>postinst</code> file.
With <code>-d nodejs</code> we set a dependency on <code>nodejs</code>.
We need to change the current workingdir, otherwhise fpm would deploy
the stuff in <code>/opt/workdir/hubot</code>.</p>

<p>The second fpm command packages the init script and the example config
file from the <code>etc</code>-folder.</p>

<figure class='code'><figcaption><span>fpm command to package the init script and example config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sh</span> <span class="s1">&#39;fpm -s dir -t deb -n hubot-init --prefix / -v $(cat VERSION) -d hubot,upstart --package packages/hubot-init-$(cat VERSION)_amd64.deb etc&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>preinst</code> and <code>postinst</code> scripts just add a <code>hubot</code>
user and set the rights on <code>/opt/hubot</code> as fpm
<a href="https://github.com/jordansissel/fpm/issues/178">does not support right management for debian packages</a>,
yet.</p>

<p>I tried several times to get all these stuff working. For an easier cleanup
between the tries, I added another task:</p>

<figure class='code'><figcaption><span>cleanup task</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;fileutils&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s2">&quot;Cleanup the workdir&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:cleanup</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">FileUtils</span><span class="o">.</span><span class="n">rm_r</span> <span class="s1">&#39;workdir&#39;</span> <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span> <span class="s1">&#39;workdir&#39;</span>
</span><span class='line'>  <span class="no">FileUtils</span><span class="o">.</span><span class="n">rm_r</span> <span class="s1">&#39;packages&#39;</span> <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span> <span class="s1">&#39;packages&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we just need to modify the <code>config.yml</code>, push the changes and
call Hubot in our IRC-Channel to trigger the jenkins build:</p>

<figure class='code'><figcaption><span>cleanup task</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">hubot</span> <span class="n">jenkins</span> <span class="n">build</span> <span class="n">hubot</span><span class="o">-</span><span class="n">build</span><span class="o">-</span><span class="n">deb</span><span class="p">,</span> <span class="n">version</span><span class="o">=</span><span class="mi">2</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gem: Version Reader]]></title>
    <link href="http://blog.yux.ch/blog/2012/11/25/gem-version-reader/"/>
    <updated>2012-11-25T15:16:00+01:00</updated>
    <id>http://blog.yux.ch/blog/2012/11/25/gem-version-reader</id>
    <content type="html"><![CDATA[<p>If you are using a <code>VERSION</code>-file to give your new (or old) cool
software tool a version, you maybe also want to display it in the footer
of the website or in the <code>help</code> command option of your CLI.</p>

<p>Instead of writing stuff like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">version</span>
</span><span class='line'>  <span class="vi">@version</span> <span class="o">||=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;VERSION&#39;</span><span class="p">,</span> <span class="s1">&#39;rb&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span> <span class="p">}</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>you could use <a href="https://github.com/luxflux/version_reader">version_reader</a>
(written by me) which reads the <code>VERSION</code>-file and does all the
stripping and formatting for you.</p>

<!-- more -->


<p>Version Reader is just a small wrapper around the <code>VERSION</code>-file.</p>

<p>Let&#8217;s do a short example. Imagine that your <code>VERSION</code>-file is in <code>~/MyApp/</code>
with the content <code>0.4.2\n</code>. Load the version with the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;version_reader&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">version_reader</span> <span class="o">=</span> <span class="no">VersionReader</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;~/MyApp/VERSION&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, you can display a nicely formatted version</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">version_reader</span><span class="o">.</span><span class="n">normal</span> <span class="c1"># Output: 0.4.2</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you don&#8217;t like this output, just write a flavor to add a
different one. There is already a Rails-flavor which adds some
additional output formats:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">version_reader</span><span class="o">.</span><span class="n">extend</span> <span class="no">VersionReader</span><span class="o">::</span><span class="no">Flavor</span><span class="o">::</span><span class="no">Rails</span>
</span><span class='line'><span class="n">version_reader</span><span class="o">.</span><span class="n">rails_env</span> <span class="c1"># Output: 0.4.2-development</span>
</span></code></pre></td></tr></table></div></figure>


<p>Check the <a href="https://github.com/luxflux/version_reader">Readme</a> for more
details.</p>

<p>By the way, if you add this Gem in the <code>Gemfile</code> of your Rails-Application,
it will automatically define <code>MyApp::Application.version</code> with a
Rails-flavored instance of <code>VersionReader</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://blog.yux.ch/blog/2012/11/24/hello-world/"/>
    <updated>2012-11-24T18:59:00+01:00</updated>
    <id>http://blog.yux.ch/blog/2012/11/24/hello-world</id>
    <content type="html"><![CDATA[<p>Hi everyone. This is the hello world post of this blog. This is the blog
of Raffael Schmid and I will post stuff about coding, system
administrating and other geeky stuff.</p>

<p>About me&#8230; I&#8217;m an employee at Nine Internet Solutions AG where I first
started as an &#8220;System Administrator&#8221;. But right from the start I was
developing stuff and learned Ruby (on Rails). So my job description
changed &#8220;Web Software Developer&#8221;, finally.</p>

<p>This blog is hosted on <a href="http://pages.github.com/">github-pages</a> and
powered by <a href="http://octopress.org/">Octopress</a>.</p>
]]></content>
  </entry>
  
</feed>
